import {exampleVideos} from '@remotion/example-videos';
import {expect, test} from 'bun:test';
import {areSamplesComplete} from '../containers/iso-base-media/are-samples-complete';
import {getSamplePositionsFromTrack} from '../containers/iso-base-media/get-sample-positions-from-track';
import type {TrakBox} from '../containers/iso-base-media/trak/trak';
import {parseMedia} from '../parse-media';
import {nodeReader} from '../readers/from-node';

test('Stream samples', async () => {
	const {tracks} = await parseMedia({
		src: exampleVideos.mp4withmp3,
		fields: {
			tracks: true,
			videoCodec: true,
			audioCodec: true,
		},
		reader: nodeReader,
		acknowledgeRemotionLicense: true,
	});

	const description = new Uint8Array([
		1, 100, 0, 32, 255, 225, 0, 32, 103, 100, 0, 32, 172, 217, 64, 68, 2, 39,
		150, 92, 5, 168, 16, 16, 45, 40, 0, 0, 3, 0, 8, 0, 0, 3, 1, 224, 120, 193,
		140, 176, 1, 0, 6, 104, 235, 224, 140, 178, 44, 253, 248, 248, 0,
	]);

	const {trakBox, ...trackInfo} = tracks.videoTracks[0];
	expect(trackInfo).toEqual({
		m3uStreamFormat: null,
		type: 'video',
		trackId: 1,
		description,
		timescale: 15360,
		codec: 'avc1.640020',
		sampleAspectRatio: {
			numerator: 1,
			denominator: 1,
		},
		width: 1080,
		height: 1080,
		codedWidth: 1080,
		codedHeight: 1080,
		displayAspectHeight: 1080,
		displayAspectWidth: 1080,
		rotation: 0,
		codecPrivate: new Uint8Array([
			1, 100, 0, 32, 255, 225, 0, 32, 103, 100, 0, 32, 172, 217, 64, 68, 2, 39,
			150, 92, 5, 168, 16, 16, 45, 40, 0, 0, 3, 0, 8, 0, 0, 3, 1, 224, 120, 193,
			140, 176, 1, 0, 6, 104, 235, 224, 140, 178, 44, 253, 248, 248, 0,
		]),
		color: {
			fullRange: null,
			transferCharacteristics: null,
			matrixCoefficients: null,
			primaries: null,
		},
		codecEnum: 'h264',
		fps: 30,
	});

	expect(
		getSamplePositionsFromTrack({
			trakBox: trakBox as TrakBox,
			moofBoxes: [],
			moofComplete: areSamplesComplete({moofBoxes: [], tfraBoxes: []}),
		}),
	).toEqual({
		isComplete: true,
		samplePositions: [
			{
				chunk: 0,
				cts: 1024,
				dts: 0,
				duration: 512,
				isKeyframe: true,
				offset: 1637,
				size: 4834,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 0,
				cts: 1536,
				dts: 512,
				duration: 512,
				isKeyframe: false,
				offset: 6471,
				size: 437,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 1,
				cts: 2048,
				dts: 1024,
				duration: 512,
				isKeyframe: false,
				offset: 7868,
				size: 698,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 2,
				cts: 2560,
				dts: 1536,
				duration: 512,
				isKeyframe: false,
				offset: 10486,
				size: 595,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 3,
				cts: 3072,
				dts: 2048,
				duration: 512,
				isKeyframe: false,
				offset: 12041,
				size: 548,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 4,
				cts: 3584,
				dts: 2560,
				duration: 512,
				isKeyframe: false,
				offset: 14509,
				size: 611,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 5,
				cts: 4096,
				dts: 3072,
				duration: 512,
				isKeyframe: false,
				offset: 16080,
				size: 701,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 6,
				cts: 4608,
				dts: 3584,
				duration: 512,
				isKeyframe: false,
				offset: 17741,
				size: 535,
				bigEndian: false,
				chunkSize: null,
			},
			{
				chunk: 7,
				cts: 5120,
				dts: 4096,
				duration: 512,
				isKeyframe: false,
				offset: 20196,
				bigEndian: false,
				chunkSize: null,
				size: 776,
			},
			{
				chunk: 8,
				cts: 5632,
				dts: 4608,
				duration: 512,
				isKeyframe: false,
				offset: 21932,
				size: 586,
				bigEndian: false,
				chunkSize: null,
			},
		],
	});

	const [firstAudioTrack] = tracks.audioTracks;
	const {trakBox: trakBox2, ...audioTrack} = firstAudioTrack;

	expect(audioTrack).toEqual({
		type: 'audio',
		trackId: 2,
		timescale: 48000,
		numberOfChannels: 2,
		codec: 'mp3',
		sampleRate: 48000,
		description: undefined,
		codecPrivate: null,
		codecEnum: 'mp3',
	});
	expect(
		getSamplePositionsFromTrack({
			trakBox: trakBox2 as TrakBox,
			moofBoxes: [],
			moofComplete: areSamplesComplete({moofBoxes: [], tfraBoxes: []}),
		}),
	).toEqual({
		samplePositions: [
			{
				offset: 6908,
				size: 960,
				isKeyframe: true,
				dts: 0,
				duration: 1152,
				cts: 0,
				chunk: 0,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 8566,
				size: 960,
				isKeyframe: true,
				dts: 1152,
				duration: 1152,
				cts: 1152,
				chunk: 1,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 9526,
				size: 960,
				isKeyframe: true,
				dts: 2304,
				duration: 1152,
				cts: 2304,
				chunk: 1,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 11081,
				size: 960,
				isKeyframe: true,
				dts: 3456,
				duration: 1152,
				cts: 3456,
				chunk: 2,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 12589,
				size: 960,
				isKeyframe: true,
				dts: 4608,
				duration: 1152,
				cts: 4608,
				chunk: 3,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 13549,
				size: 960,
				isKeyframe: true,
				dts: 5760,
				duration: 1152,
				cts: 5760,
				chunk: 3,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 15120,
				size: 960,
				isKeyframe: true,
				dts: 6912,
				duration: 1152,
				cts: 6912,
				chunk: 4,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 16781,
				size: 960,
				isKeyframe: true,
				dts: 8064,
				duration: 1152,
				cts: 8064,
				chunk: 5,
				bigEndian: false,
				chunkSize: null,
			},
			{
				offset: 18276,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 9216,
				duration: 1152,
				cts: 9216,
				chunk: 6,
			},
			{
				offset: 19236,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 10368,
				duration: 1152,
				cts: 10368,
				chunk: 6,
			},
			{
				offset: 20972,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 11520,
				duration: 1152,
				cts: 11520,
				chunk: 7,
			},
			{
				offset: 22518,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 12672,
				duration: 1152,
				cts: 12672,
				chunk: 8,
			},
			{
				offset: 23478,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 13824,
				duration: 1152,
				cts: 13824,
				chunk: 8,
			},
			{
				offset: 24438,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 14976,
				duration: 1152,
				cts: 14976,
				chunk: 8,
			},
			{
				offset: 25398,
				bigEndian: false,
				chunkSize: null,
				size: 960,
				isKeyframe: true,
				dts: 16128,
				duration: 1152,
				cts: 16128,
				chunk: 8,
			},
		],
		isComplete: true,
	});
});
